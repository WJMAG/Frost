name: Build and Deploy Frost

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker-private.repo.minestudio.host
  IMAGE_NAME: docker-private.repo.minestudio.host/user/frost
  JAVA_VERSION: '21'
  NODE_VERSION: '22'

jobs:
  build:
    runs-on: arc-runner-set
    outputs:
      docker_image: ${{ steps.build_docker.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build with Gradle
        run: ./gradlew build

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        id: build_docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: ${{ env.IMAGE_NAME }}:latest
          outputs: type=docker,dest=${{ runner.temp }}/docker-image.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ runner.temp }}/docker-image.tar

      - name: Upload build directory
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./build

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: arc-runner-set
    permissions:
      packages: write
      contents: read
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: ${{ runner.temp }}

      - name: Load Docker Image
        run: docker load -i ${{ runner.temp }}/docker-image.tar

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPO_PRIVATE_USER }}
          password: ${{ secrets.REPO_PRIVATE_PASS }}

      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}:latest

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build directory
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./

      - name: Create Sentry Release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: minestudio
          SENTRY_PROJECT: frost
        with:
          environment: production
          ignore_missing: true
          finalize: true

      - name: Deploy Sentry Sourcemaps
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: minestudio
          SENTRY_PROJECT: frost
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli --url=https://sentry.minestudio.dev debug-files bundle-jvm --output bundle --debug-id $(node -e "console.log(require('crypto').randomUUID())") ./src
          sentry-cli --url=https://sentry.minestudio.dev debug-files upload --type jvm bundle