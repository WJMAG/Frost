name: Build and Deploy Frost

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker-private.repo.minestudio.host
  IMAGE_NAME: docker-private.repo.minestudio.host/user/frost
  JAVA_VERSION: '21'
  NODE_VERSION: '22'

jobs:
  build:
    runs-on: arc-runner-set
    outputs:
      image_tag: ${{ steps.tag_image.outputs.tag }}
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build with Gradle
        run: ./gradlew build

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPO_PRIVATE_USER }}
          password: ${{ secrets.REPO_PRIVATE_PASS }}

      - name: Generate tag
        id: tag_image
        run: |
          echo "tag=latest" >> $GITHUB_OUTPUT
          # Or use a commit-based tag: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.IMAGE_NAME }}:${{ steps.tag_image.outputs.tag }}

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: arc-runner-set
    permissions:
      contents: read
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Sentry Release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: minestudio
          SENTRY_PROJECT: frost
        with:
          environment: production
          ignore_missing: true
          finalize: true

      - name: Deploy Sentry Sourcemaps
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: minestudio
          SENTRY_PROJECT: frost
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli --url=https://sentry.minestudio.dev debug-files bundle-jvm --output bundle --debug-id $(node -e "console.log(require('crypto').randomUUID())") ./src
          sentry-cli --url=https://sentry.minestudio.dev debug-files upload --type jvm bundle

  sonatype:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: arc-runner-set
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - id: vars
        run: echo "short_commit_hash=${GITHUB_SHA::10}" >> $GITHUB_OUTPUT
      - name: Publish to Central via Build
        if: github.repository_owner == 'MineStudio-Host'
        run: |
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
          echo "Version: ${VERSION}" >> $GITHUB_STEP_SUMMARY
        env:
          VERSION: ${{ steps.vars.outputs.short_commit_hash }}
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.GPG_KEY_ID }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.GPG_KEY_PASSPHRASE }}